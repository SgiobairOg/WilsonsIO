---
import Root from './Root.astro'
import type { CollectionEntry } from 'astro:content';
import BlogPostTagList from '@components/BlogPostTagList.astro'
import RelatedPostList from '@components/RelatedPostList.astro'

interface Props {
  post: CollectionEntry<'blogPosts'>;
  relatedPosts: Array<CollectionEntry<'blogPosts'>>;
}

const { post, relatedPosts } = Astro.props;

const { origin, pathname } = Astro.url
const canonicalUrl = new URL(origin + pathname).toString()
---
<Root title={post.data.title} canonicalUrl={canonicalUrl}>
  <main class="content">
    <article>
      <slot />
    </article>
    {relatedPosts?.length > 0 ? (<aside>
      <RelatedPostList posts={relatedPosts}/>
    </aside>) : ''}
    {post?.data.tags?.length > 0 ? (<aside>
      <BlogPostTagList tags={post.data.tags}/>
    </aside>) : ''}
  </main>
</Root>

<style lang="scss">
  @use '@styles/_variables.scss' as *;
  @use '@styles/_mixins.scss' as *;

  .content {
    padding: 0 2rem;
    grid-row-start: content;
    grid-row-end: nav;
    grid-column-start: content;
    grid-column-end: nav;
    font-size: 1.4em;
    max-width: 100%;
    box-sizing: border-box;
    overflow: hidden;
  }

  :root[lang="jp"] .content {
    margin-right: 2rem;
  }


  @include media(">mobile") {
    :root[lang="jp"] .content {
      margin-right: 0;
    }
  }

  .controls {
    display: flex;
    flex-flow: row nowrap;
    justify-content: flex-end;
    align-items: flex-start;
    padding: 1rem 0.5rem 0 0;
    grid-area: controls;
    width: 100vw;
    max-width: 100%;
  }
  .layout {
    width: 100vw;
    max-width: 100%;
    display: grid;
    grid-template-columns: 1fr minmax(max-content, 80px);
    grid-template-rows: 7rem max-content 1fr 10rem;
    grid-column-gap: 0px;
    grid-row-gap: 0px;
    grid-template-areas:
    "controls controls"
    "nav nav"
    "content content"
    "footer footer";
    z-index: 0;

  }

  :root[lang="jp"] .layout {
    grid-template-columns: 1fr minmax(max-content, 80px);
    grid-template-areas:
    "controls controls"
    "content nav"
    "content nav"
    "footer footer";
  }

  @include media(">mobile") {
    .layout {
      grid-template-columns: 80px 1fr;
      grid-template-areas:
      ". controls"
      ". nav"
      ". content"
      ". footer";
    }
    :root[lang="jp"] .layout {
      grid-template-columns: minmax(max-content, 80px) 1fr;
      grid-template-areas:
      "controls controls"
      "nav content"
      ". content"
      ". footer";
    }
  }

  article :global(h1) {
    color: hsl(var(--color-primary));
    font-size: 3rem;
    line-height: 3.5rem;
    margin-bottom: 2rem;
    font-family:  "NikuMaru", "Cherry Bomb One", "Rounded M+", Hiragino;
    word-break: keep-all;
    word-wrap:break-word;
  }

  article :global(h2) {
    color: hsl(var(--color-primary));
    font-size: 2rem;
    line-height: 2.5rem;
    margin-bottom: 1.5rem;
    font-family:  "NikuMaru", "Cherry Bomb One", "Rounded M+", Hiragino;
    word-break: keep-all;
    word-wrap:break-word;
  }

  :root[lang="jp"] {
    article :global(h1) {
      font-size: 3.5rem;
      line-height: 4.5rem;
      margin-bottom: 2rem;
    }

    article :global(h2) {
      font-size: 2.5rem;
      line-height: 3.5em;
      margin-bottom: 1rem;
    }
  }

  
  article :global(p),
  article :global(ul) {
    margin: 0 0 1.5rem 0;
    word-break: keep-all;
    word-wrap:break-word;
  }

  article :global(p),
  article :global(li) {
    word-break: keep-all;
    word-wrap:break-word;
  }

  article :global(a) {
    @include primaryLinkStates();
  }

  :root[lang='jp'] article :global(h1) {
    margin-right: 1rem;
    text-align: justify;
  }
</style>